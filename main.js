(()=>{"use strict";class e{get(){return{url:this.URL,method:"GET"}}create(e,s){return{url:`${this.URL}/${e}`,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:s})}}}const s=async e=>await fetch(e.url,{method:e.method,headers:e.headers,body:e.body});class t extends e{constructor(e){super(),this.URL=e}async create(e){const t=await s(super.create("new-user",`${e}`));return await t.json()}}const n=document.getElementById("root");new class{constructor(e){this.container=e,this.api=new t,this.websocket=null,this.ws=null,this.host=null,this.chatData=[]}init(){this.registerEvents(),this.showLoginForm()}loginSubmit(){const e=document.querySelector("form.modal__content");e.addEventListener("submit",this.showChatForm),e.addEventListener("submit",this.onLoginChatHandler.bind(this))}drawChatHandler(e){this.onEnterChatHandler(JSON.parse(e.data))}showLoginForm(){this.bindToDOM(function(){const e=document.createElement("div"),s='<form class="modal__content" novalidate>\n      <div class="modal__header  ">\n        <label class="form__label" for="login">Выберете псевдоним</label>\n      </div>\n      <div class="modal__body ">\n        <input name="login" id="login" class="form__input" type="text"required autofocus>\n      </div>\n      <div class="modal__footer">\n        <button type="submit" class="modal__ok">Продолжить</button>\n        <button type="reset" class="modal__close">Закрыть</button>\n      </div>\n      <div class="error hidden">\n      <div class="form__hint">\n       awcawcaw\n      </div>\n    </div>\n      </form>';return e.innerHTML=s.trim(),e.firstChild}()),this.loginSubmit()}showChatForm(){this.bindToDOM(function(){const e=document.createElement("div"),s='<div class="container hidden">\n      <div class="chat__container">\n        <div class="  chat__userlist">\n          <div class="chat__connect">\n           \n          </div>\n        </div>\n        <div class = "chat__area">\n        <button class ="chat__close" type="reset">Close</button>\n          <div class=" chat__messages-container">\n            <div class="message__container message__container-interlocutor">\n    \n            </div>\n            <div class="message__container message__container-yourself">\n             \n            </div>\n    \n          </div>\n          <div class="chat__messages-input">\n            <form class=".form form__group" novalidate>\n              <input type="text" class="form message__input" placeholder="Type your message here">\n            </form>\n          </div>\n        </div>\n    \n      </div>\n      </div>';return e.innerHTML=s.trim(),e.firstChild}())}renderChat(e){function s(e){const s=new Date(e);return`${s.getDate()<10?`0${s.getDate()}`:s.getDate()}.${s.getMonth()<10?`0${s.getMonth()}`:s.getMonth()}.${String(s.getFullYear())[0]+String(s.getFullYear())[1]}`}function t(e){const s=new Date(e);return`${s.getHours()<10?`0${s.getHours()}`:s.getHours()}:${s.getMinutes()<10?`0${s.getMinutes()}`:s.getMinutes()}`}function n(e){for(;e.firstChild;)e.firstChild.remove()}this.usersId=[];const a=document.querySelector("div.chat__connect"),i=document.querySelector("div.message__container-interlocutor"),r=document.querySelector("div.message__container-yourself"),o=document.createElement("div");if(Array.isArray(e))n(a),n(i),n(r),e.forEach((e=>{if(!this.usersId.includes(e.id)){if(e.host){const s=`<div class="chat__user message__container-host">\n            ${e.name}\n            </div>`;o.innerHTML=s.trim()}else{const s=`<div class="chat__user">\n          ${e.name}\n        </div>`;o.innerHTML=s.trim()}this.usersId.push(e.id),a.appendChild(o.firstChild)}})),e.forEach((e=>{if(e.message)if(e.host){const n=`<div class="message">\n                <div class="message__header message__container-yourself ">\n                <span class="messageAuthor"> ${e.name}, </span>\n                <span class="messageDate">\n                  <span class="date">${s(e.created)}</span>\n                  <span class="time">${t(e.created)}</span>\n                </span>  \n                </div>\n                <div class="messageText">\n                  ${e.message}\n                </div>\n              </div>`;o.innerHTML=n.trim(),r.appendChild(o.firstChild)}else{const n=`<div class="message">\n          <div class="message__header">\n          <span class="messageAuthor"> ${e.name}, </span>\n          <span class="messageDate">\n            <span class="date">${s(e.created)}</span>\n            <span class="time">${t(e.created)}</span>\n          </span>  \n          </div>\n          <div class="messageText">\n            ${e.message}\n          </div>\n        </div>`;o.innerHTML=n.trim(),i.appendChild(o.firstChild)}}));else if("object"==typeof e){if(!this.usersId.includes(e.id))if(e.host){const s=`<div class="chat__user message__container-host\n          ">\n          ${e.name}\n        </div>`;o.innerHTML=s.trim()}else{const s=`<div class="chat__user">\n          ${e.name}\n        </div>`;o.innerHTML=s.trim()}if(e.message)if(e.host){const n=`<div class="message">\n                  <div class="message__header message__container-yourself ">\n                  <span class="messageAuthor"> ${e.name}, </span>\n                  <span class="messageDate">\n                    <span class="date">${s(e.created)}</span>\n                    <span class="time">${t(e.created)}</span>\n                  </span>  \n                  </div>\n                  <div class="messageText">\n                    ${e.message}\n                  </div>\n                </div>`;o.innerHTML=n.trim(),r.appendChild(o.firstChild)}else{const n=`<div class="message">\n            <div class="message__header">\n            <span class="messageAuthor"> ${e.name}, </span>\n            <span class="messageDate">\n              <span class="date">${s(e.created)}</span>\n              <span class="time">${t(e.created)}</span>\n            </span>  \n            </div>\n            <div class="messageText">\n              ${e.message}\n            </div>\n          </div>`;o.innerHTML=n.trim(),i.appendChild(o.firstChild)}}}onEnterChatHandler(e){const s=document.querySelector("form.modal__content"),t=document.querySelector("div.container");this.renderChat(e),s.classList.add("hidden"),t.classList.remove("hidden");document.querySelector("form.form__group").addEventListener("submit",this.sendMessage),this.ws.removeEventListener("message",this.drawChatHandler);document.querySelector("button.chat__close").addEventListener("click",this.exitChat)}onLoginChatHandler(e){e.preventDefault();const s=document.querySelector("input.form__input");(async()=>{const e=new t("http://localhost:3000");return await e.create(s.value)})().then((e=>{if("error"===e.status){const s=document.querySelector("div.error"),t=document.querySelector("div.form__hint");s.classList.remove("hidden"),t.textContent=e.message}"ok"===e.status&&(this.host=e.user,this.ws=new WebSocket("ws://localhost:3000/ws"),this.ws.addEventListener("message",this.drawChatHandler))})).catch((e=>{console.error("Произошла ошибка: ",e)}))}sendMessage(e){e.preventDefault();const s=document.querySelector("input.message__input"),t={id:this.host.id,name:this.host.name,host:!0,message:s.value,created:new Date(Date.now()),type:"send"};this.ws.send(JSON.stringify(t)),this.ws.addEventListener("message",(e=>{this.renderChat(JSON.parse(e.data))})),s.value=""}exitChat(e){e.preventDefault();const s=document.querySelector("form.form__group"),t={id:this.host.id,name:this.host.name,host:!0,message:"",created:new Date(Date.now()),type:"exit"};this.ws.send(JSON.stringify(t)),this.ws.addEventListener("message",(e=>{this.renderChat(JSON.parse(e.data))})),s.reset(),this.ws.close()}messageSubmit(){document.querySelector("form.form__group").addEventListener("submit",this.sendMessage)}bindToDOM(e){this.container.appendChild(e)}registerEvents(){this.showLoginForm=this.showLoginForm.bind(this),this.showChatForm=this.showChatForm.bind(this),this.loginSubmit=this.loginSubmit.bind(this),this.onEnterChatHandler=this.onEnterChatHandler.bind(this),this.sendMessage=this.sendMessage.bind(this),this.drawChatHandler=this.drawChatHandler.bind(this),this.exitChat=this.exitChat.bind(this)}}(n).init()})();